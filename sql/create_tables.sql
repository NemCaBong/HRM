-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;

CREATE TYPE "USER_FORM_STATUS" AS ENUM ('NEW', 'PENDING_APPROVAL', 'APPROVED', 'REJECTED', 'CLOSED');
CREATE TYPE "USER_STATUS" AS ENUM ('INTERN', 'PROBATION', 'OFFICIAL');

CREATE TABLE IF NOT EXISTS public.form_details
(
    id uuid NOT NULL,
    content character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    is_deleted boolean NOT NULL,
    created_at timestamp without time zone,
    deleted_at timestamp without time zone,
    updated_at timestamp without time zone,
    form_id uuid NOT NULL,
    index integer NOT NULL,
    CONSTRAINT form_details_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.forms
(
    id uuid NOT NULL,
    name character varying(300) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    deleted_at timestamp without time zone,
    is_deleted boolean,
    created_by uuid,
    updated_by uuid,
    deleted_by uuid,
    description character varying(500) COLLATE pg_catalog."default",
    total integer,
    CONSTRAINT forms_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.refresh_tokens
(
    id uuid NOT NULL,
    created_at timestamp without time zone,
    user_id uuid NOT NULL,
    iat timestamp without time zone NOT NULL,
    exp timestamp without time zone NOT NULL,
    token character varying(600) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.role_modules
(
    id uuid NOT NULL,
    role_id uuid NOT NULL,
    api character varying(1024) COLLATE pg_catalog."default",
    is_can_read boolean,
    is_can_add boolean,
    is_can_edit boolean,
    is_can_delete boolean,
    updated_at timestamp without time zone,
    is_deleted boolean NOT NULL,
    deleted_at timestamp without time zone,
    updated_by uuid,
    is_can_approve boolean,
    CONSTRAINT role_modules_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    id uuid NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description character varying(500) COLLATE pg_catalog."default",
    is_deleted boolean NOT NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_form_details
(
    id uuid NOT NULL,
    user_form_id uuid NOT NULL,
    form_details_id uuid NOT NULL,
    answer character varying(2000) COLLATE pg_catalog."default",
    is_deleted boolean NOT NULL,
    deleted_at timestamp without time zone,
    evaluation character varying(1000) COLLATE pg_catalog."default",
    CONSTRAINT user_form_details_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_forms
(
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    form_id uuid NOT NULL,
    created_at timestamp without time zone,
    created_by uuid,
    status "USER_FORM_STATUS",
    is_deleted boolean NOT NULL,
    deleted_at timestamp without time zone,
    deleted_by uuid,
    filled_at timestamp without time zone,
    updated_at timestamp without time zone,
    updated_by uuid,
    CONSTRAINT user_forms_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_roles
(
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    role_id uuid NOT NULL,
    is_deleted boolean NOT NULL,
    deleted_at timestamp without time zone,
    CONSTRAINT user_roles_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    first_name character varying(30) COLLATE pg_catalog."default" NOT NULL,
    id uuid NOT NULL,
    phone character varying(15) COLLATE pg_catalog."default",
    address character varying(500) COLLATE pg_catalog."default",
    last_name character varying(30) COLLATE pg_catalog."default" NOT NULL,
    email character varying(320) COLLATE pg_catalog."default" NOT NULL,
    insurance_number character varying(30) COLLATE pg_catalog."default",
    citizen_id character varying(20) COLLATE pg_catalog."default",
    password character varying(300) COLLATE pg_catalog."default",
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    is_deleted boolean NOT NULL,
    updated_by uuid,
    deleted_at time without time zone,
    avatar character varying(2048) COLLATE pg_catalog."default",
    employee_id character varying(8) COLLATE pg_catalog."default" NOT NULL,
    status "USER_STATUS",
    manager_id uuid,
    CONSTRAINT users_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.form_details
    ADD CONSTRAINT fk_form_formdetails FOREIGN KEY (form_id)
    REFERENCES public.forms (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.refresh_tokens
    ADD CONSTRAINT refresh_tokens_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.role_modules
    ADD CONSTRAINT fk_role_rolemodules FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.user_form_details
    ADD CONSTRAINT fk_formdetails_userformdetails FOREIGN KEY (form_details_id)
    REFERENCES public.form_details (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.user_form_details
    ADD CONSTRAINT fk_user_form_details FOREIGN KEY (user_form_id)
    REFERENCES public.user_forms (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.user_forms
    ADD CONSTRAINT fk_form_userform FOREIGN KEY (form_id)
    REFERENCES public.forms (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.user_forms
    ADD CONSTRAINT fk_user_userform FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.user_roles
    ADD CONSTRAINT fk_role_userrole FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.user_roles
    ADD CONSTRAINT fk_user_userrole FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

ALTER TABLE IF EXISTS public.user_forms ADD COLUMN filled_by UUID;

END;